# application? 8080 ??? ????.
server:
  port: 8080

# Redis? 36379 ??? ????.
# (?? ????? Docker Redis ????? ? ??? ??? ?? ?? ? ??.)
spring:
  data:
    redis:
      port: 36379
  # Spring Cloud ???? ??????? ??? ? ?? ??
  application:
    name: back-250417
  # dev ???? ?? ???
  # secret??? ?? ?? ??(application-secret.yml)? ?? ?? -> ?? DB ????? ?? ??? ????
  profiles:
    active: dev
    include: secret
  # Spring? /static, /public ?? ??? ???? ?? ?? ???? ??? ????
  web:
    resources:
      add-mappings: false
  # ???? ?? ??? JSON?? ???? ? ??? ???? ??? ??
  # ex): ?????? DTO ??? ???? ?? X
  output:
    ansi:
      enabled: always
  jackson:
    serialization:
      fail-on-empty-beans: false
  # H2 ?????? ??
  datasource:
    url: jdbc:h2:./db_dev;MODE=MySQL
    username: sa
    password:
    driver-class-name: org.h2.Driver
    hikari:
      auto-commit: false
  # JPA ??
  jpa:
    hibernate:
      ddl-auto: update
    # ?? ?? ? ??? ?? ??? :
    # - default_batch_fetch_size: N+1 ?? ?? ??
    # - format_sql, highlight_sql: ?? ??? ??
    # - use_sql_comments: ?? ?? ???
    properties:
      hibernate:
        default_batch_fetch_size: 100
        format_sql: true
        highlight_sql: true
        use_sql_comments: true

# ?? ??? DEBUG ~ TRACE? ???? ??
logging:
  level:
    com.example: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.orm.jdbc.bind: TRACE
    org.hibernate.orm.jdbc.extract: TRACE
    org.springframework.transaction.interceptor: TRACE

custom:
  dev:
    domain: localhost
    backUrl: "http://${custom.dev.domain}:${server.port}"
    frontUrl: "http://${custom.dev.domain}:3000"
  prod:
    domain: app3.kozae.shop
    backUrl: "https://api.${custom.prod.domain}"
    frontUrl: "https://www.${custom.prod.domain}"
  site:
    domain: "${custom.dev.domain}"
    backUrl: "${custom.dev.backUrl}"
    frontUrl: "${custom.dev.frontUrl}"